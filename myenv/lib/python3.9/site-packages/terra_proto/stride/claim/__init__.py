# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: stride/claim/claim.proto, stride/claim/genesis.proto, stride/claim/params.proto, stride/claim/query.proto, stride/claim/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...cosmos.base import v1beta1 as __cosmos_base_v1_beta1__
from .. import vesting as _vesting__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class Action(betterproto.Enum):
    ACTION_FREE = 0
    ACTION_LIQUID_STAKE = 1
    ACTION_DELEGATE_STAKE = 2


@dataclass(eq=False, repr=False)
class ClaimRecord(betterproto.Message):
    """A Claim Records is the metadata of claim data per address"""

    airdrop_identifier: str = betterproto.string_field(1)
    """airdrop identifier"""

    address: str = betterproto.string_field(2)
    """address of claim user"""

    weight: str = betterproto.string_field(3)
    """weight that represent the portion from total allocation"""

    action_completed: List[bool] = betterproto.bool_field(4)
    """
    true if action is completed index of bool in array refers to action enum #
    """


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the claim module's parameters."""

    airdrops: List["Airdrop"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Airdrop(betterproto.Message):
    airdrop_identifier: str = betterproto.string_field(1)
    airdrop_start_time: datetime = betterproto.message_field(2)
    """seconds"""

    airdrop_duration: timedelta = betterproto.message_field(3)
    """seconds"""

    claim_denom: str = betterproto.string_field(4)
    """denom of claimable asset"""

    distributor_address: str = betterproto.string_field(5)
    """airdrop distribution account"""

    claimed_so_far: str = betterproto.string_field(6)
    """ustrd tokens claimed so far in the current period"""


@dataclass(eq=False, repr=False)
class MsgSetAirdropAllocations(betterproto.Message):
    allocator: str = betterproto.string_field(1)
    airdrop_identifier: str = betterproto.string_field(2)
    users: List[str] = betterproto.string_field(3)
    weights: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgSetAirdropAllocationsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgClaimFreeAmount(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MsgClaimFreeAmountResponse(betterproto.Message):
    claimed_amount: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgCreateAirdrop(betterproto.Message):
    distributor: str = betterproto.string_field(1)
    identifier: str = betterproto.string_field(2)
    start_time: int = betterproto.uint64_field(3)
    duration: int = betterproto.uint64_field(4)
    denom: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MsgCreateAirdropResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDeleteAirdrop(betterproto.Message):
    distributor: str = betterproto.string_field(1)
    identifier: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgDeleteAirdropResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryDistributorAccountBalanceRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    airdrop_identifier: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryDistributorAccountBalanceResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    distributor_account_balance: List[
        "__cosmos_base_v1_beta1__.Coin"
    ] = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class QueryClaimRecordRequest(betterproto.Message):
    airdrop_identifier: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryClaimRecordResponse(betterproto.Message):
    claim_record: "ClaimRecord" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryClaimableForActionRequest(betterproto.Message):
    airdrop_identifier: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    action: "Action" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class QueryClaimableForActionResponse(betterproto.Message):
    coins: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryTotalClaimableRequest(betterproto.Message):
    airdrop_identifier: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    include_claimed: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class QueryTotalClaimableResponse(betterproto.Message):
    coins: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryUserVestingsRequest(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryUserVestingsResponse(betterproto.Message):
    spendable_coins: List["__cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(
        3
    )
    periods: List["_vesting__.Period"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the claim module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    """params defines all the parameters of the module."""

    claim_records: List["ClaimRecord"] = betterproto.message_field(2)
    """list of claim records, one for every airdrop recipient"""


class MsgStub(betterproto.ServiceStub):
    async def set_airdrop_allocations(
        self,
        msg_set_airdrop_allocations: "MsgSetAirdropAllocations",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSetAirdropAllocationsResponse":
        return await self._unary_unary(
            "/stride.claim.Msg/SetAirdropAllocations",
            msg_set_airdrop_allocations,
            MsgSetAirdropAllocationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def claim_free_amount(
        self,
        msg_claim_free_amount: "MsgClaimFreeAmount",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgClaimFreeAmountResponse":
        return await self._unary_unary(
            "/stride.claim.Msg/ClaimFreeAmount",
            msg_claim_free_amount,
            MsgClaimFreeAmountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_airdrop(
        self,
        msg_create_airdrop: "MsgCreateAirdrop",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateAirdropResponse":
        return await self._unary_unary(
            "/stride.claim.Msg/CreateAirdrop",
            msg_create_airdrop,
            MsgCreateAirdropResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_airdrop(
        self,
        msg_delete_airdrop: "MsgDeleteAirdrop",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDeleteAirdropResponse":
        return await self._unary_unary(
            "/stride.claim.Msg/DeleteAirdrop",
            msg_delete_airdrop,
            MsgDeleteAirdropResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def distributor_account_balance(
        self,
        query_distributor_account_balance_request: "QueryDistributorAccountBalanceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDistributorAccountBalanceResponse":
        return await self._unary_unary(
            "/stride.claim.Query/DistributorAccountBalance",
            query_distributor_account_balance_request,
            QueryDistributorAccountBalanceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/stride.claim.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def claim_record(
        self,
        query_claim_record_request: "QueryClaimRecordRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryClaimRecordResponse":
        return await self._unary_unary(
            "/stride.claim.Query/ClaimRecord",
            query_claim_record_request,
            QueryClaimRecordResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def claimable_for_action(
        self,
        query_claimable_for_action_request: "QueryClaimableForActionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryClaimableForActionResponse":
        return await self._unary_unary(
            "/stride.claim.Query/ClaimableForAction",
            query_claimable_for_action_request,
            QueryClaimableForActionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def total_claimable(
        self,
        query_total_claimable_request: "QueryTotalClaimableRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTotalClaimableResponse":
        return await self._unary_unary(
            "/stride.claim.Query/TotalClaimable",
            query_total_claimable_request,
            QueryTotalClaimableResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def user_vestings(
        self,
        query_user_vestings_request: "QueryUserVestingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryUserVestingsResponse":
        return await self._unary_unary(
            "/stride.claim.Query/UserVestings",
            query_user_vestings_request,
            QueryUserVestingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def set_airdrop_allocations(
        self, msg_set_airdrop_allocations: "MsgSetAirdropAllocations"
    ) -> "MsgSetAirdropAllocationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def claim_free_amount(
        self, msg_claim_free_amount: "MsgClaimFreeAmount"
    ) -> "MsgClaimFreeAmountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_airdrop(
        self, msg_create_airdrop: "MsgCreateAirdrop"
    ) -> "MsgCreateAirdropResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_airdrop(
        self, msg_delete_airdrop: "MsgDeleteAirdrop"
    ) -> "MsgDeleteAirdropResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_set_airdrop_allocations(
        self,
        stream: "grpclib.server.Stream[MsgSetAirdropAllocations, MsgSetAirdropAllocationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_airdrop_allocations(request)
        await stream.send_message(response)

    async def __rpc_claim_free_amount(
        self,
        stream: "grpclib.server.Stream[MsgClaimFreeAmount, MsgClaimFreeAmountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.claim_free_amount(request)
        await stream.send_message(response)

    async def __rpc_create_airdrop(
        self,
        stream: "grpclib.server.Stream[MsgCreateAirdrop, MsgCreateAirdropResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_airdrop(request)
        await stream.send_message(response)

    async def __rpc_delete_airdrop(
        self,
        stream: "grpclib.server.Stream[MsgDeleteAirdrop, MsgDeleteAirdropResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_airdrop(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/stride.claim.Msg/SetAirdropAllocations": grpclib.const.Handler(
                self.__rpc_set_airdrop_allocations,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSetAirdropAllocations,
                MsgSetAirdropAllocationsResponse,
            ),
            "/stride.claim.Msg/ClaimFreeAmount": grpclib.const.Handler(
                self.__rpc_claim_free_amount,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgClaimFreeAmount,
                MsgClaimFreeAmountResponse,
            ),
            "/stride.claim.Msg/CreateAirdrop": grpclib.const.Handler(
                self.__rpc_create_airdrop,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateAirdrop,
                MsgCreateAirdropResponse,
            ),
            "/stride.claim.Msg/DeleteAirdrop": grpclib.const.Handler(
                self.__rpc_delete_airdrop,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDeleteAirdrop,
                MsgDeleteAirdropResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def distributor_account_balance(
        self,
        query_distributor_account_balance_request: "QueryDistributorAccountBalanceRequest",
    ) -> "QueryDistributorAccountBalanceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def claim_record(
        self, query_claim_record_request: "QueryClaimRecordRequest"
    ) -> "QueryClaimRecordResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def claimable_for_action(
        self, query_claimable_for_action_request: "QueryClaimableForActionRequest"
    ) -> "QueryClaimableForActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def total_claimable(
        self, query_total_claimable_request: "QueryTotalClaimableRequest"
    ) -> "QueryTotalClaimableResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_vestings(
        self, query_user_vestings_request: "QueryUserVestingsRequest"
    ) -> "QueryUserVestingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_distributor_account_balance(
        self,
        stream: "grpclib.server.Stream[QueryDistributorAccountBalanceRequest, QueryDistributorAccountBalanceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.distributor_account_balance(request)
        await stream.send_message(response)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_claim_record(
        self,
        stream: "grpclib.server.Stream[QueryClaimRecordRequest, QueryClaimRecordResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.claim_record(request)
        await stream.send_message(response)

    async def __rpc_claimable_for_action(
        self,
        stream: "grpclib.server.Stream[QueryClaimableForActionRequest, QueryClaimableForActionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.claimable_for_action(request)
        await stream.send_message(response)

    async def __rpc_total_claimable(
        self,
        stream: "grpclib.server.Stream[QueryTotalClaimableRequest, QueryTotalClaimableResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.total_claimable(request)
        await stream.send_message(response)

    async def __rpc_user_vestings(
        self,
        stream: "grpclib.server.Stream[QueryUserVestingsRequest, QueryUserVestingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.user_vestings(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/stride.claim.Query/DistributorAccountBalance": grpclib.const.Handler(
                self.__rpc_distributor_account_balance,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDistributorAccountBalanceRequest,
                QueryDistributorAccountBalanceResponse,
            ),
            "/stride.claim.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/stride.claim.Query/ClaimRecord": grpclib.const.Handler(
                self.__rpc_claim_record,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryClaimRecordRequest,
                QueryClaimRecordResponse,
            ),
            "/stride.claim.Query/ClaimableForAction": grpclib.const.Handler(
                self.__rpc_claimable_for_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryClaimableForActionRequest,
                QueryClaimableForActionResponse,
            ),
            "/stride.claim.Query/TotalClaimable": grpclib.const.Handler(
                self.__rpc_total_claimable,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTotalClaimableRequest,
                QueryTotalClaimableResponse,
            ),
            "/stride.claim.Query/UserVestings": grpclib.const.Handler(
                self.__rpc_user_vestings,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryUserVestingsRequest,
                QueryUserVestingsResponse,
            ),
        }

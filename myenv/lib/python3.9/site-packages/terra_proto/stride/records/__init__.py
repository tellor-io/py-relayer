# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: stride/records/callbacks.proto, stride/records/genesis.proto, stride/records/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...cosmos.base.query import v1beta1 as __cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class DepositRecordStatus(betterproto.Enum):
    TRANSFER_QUEUE = 0
    """in transfer queue to be sent to the delegation ICA"""

    TRANSFER_IN_PROGRESS = 2
    """transfer in progress (IBC packet sent, ack not received)"""

    DELEGATION_QUEUE = 1
    """in staking queue on delegation ICA"""

    DELEGATION_IN_PROGRESS = 3
    """staking in progress (ICA packet sent, ack not received)"""


class DepositRecordSource(betterproto.Enum):
    STRIDE = 0
    WITHDRAWAL_ICA = 1


class HostZoneUnbondingStatus(betterproto.Enum):
    UNBONDING_QUEUE = 0
    """tokens bonded on delegate account"""

    UNBONDING_IN_PROGRESS = 3
    EXIT_TRANSFER_QUEUE = 1
    """unbonding completed on delegate account"""

    EXIT_TRANSFER_IN_PROGRESS = 4
    CLAIMABLE = 2
    """transfer success"""


@dataclass(eq=False, repr=False)
class UserRedemptionRecord(betterproto.Message):
    id: str = betterproto.string_field(1)
    sender: str = betterproto.string_field(2)
    receiver: str = betterproto.string_field(3)
    amount: str = betterproto.string_field(4)
    denom: str = betterproto.string_field(5)
    host_zone_id: str = betterproto.string_field(6)
    epoch_number: int = betterproto.uint64_field(7)
    claim_is_pending: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    pass


@dataclass(eq=False, repr=False)
class RecordsPacketData(betterproto.Message):
    no_data: "NoData" = betterproto.message_field(1, group="packet")


@dataclass(eq=False, repr=False)
class NoData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DepositRecord(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    amount: str = betterproto.string_field(2)
    denom: str = betterproto.string_field(3)
    host_zone_id: str = betterproto.string_field(4)
    status: "DepositRecordStatus" = betterproto.enum_field(6)
    deposit_epoch_number: int = betterproto.uint64_field(7)
    source: "DepositRecordSource" = betterproto.enum_field(8)


@dataclass(eq=False, repr=False)
class HostZoneUnbonding(betterproto.Message):
    st_token_amount: str = betterproto.string_field(1)
    native_token_amount: str = betterproto.string_field(2)
    denom: str = betterproto.string_field(3)
    host_zone_id: str = betterproto.string_field(4)
    unbonding_time: int = betterproto.uint64_field(5)
    status: "HostZoneUnbondingStatus" = betterproto.enum_field(6)
    user_redemption_records: List[str] = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class EpochUnbondingRecord(betterproto.Message):
    epoch_number: int = betterproto.uint64_field(1)
    host_zone_unbondings: List["HostZoneUnbonding"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the recordÏ€s module's genesis state. next id: 9"""

    params: "Params" = betterproto.message_field(1)
    port_id: str = betterproto.string_field(2)
    user_redemption_record_list: List[
        "UserRedemptionRecord"
    ] = betterproto.message_field(3)
    user_redemption_record_count: int = betterproto.uint64_field(4)
    epoch_unbonding_record_list: List[
        "EpochUnbondingRecord"
    ] = betterproto.message_field(5)
    deposit_record_list: List["DepositRecord"] = betterproto.message_field(7)
    deposit_record_count: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryGetDepositRecordRequest(betterproto.Message):
    id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryGetDepositRecordResponse(betterproto.Message):
    deposit_record: "DepositRecord" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllDepositRecordRequest(betterproto.Message):
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllDepositRecordResponse(betterproto.Message):
    deposit_record: List["DepositRecord"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryGetUserRedemptionRecordRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetUserRedemptionRecordResponse(betterproto.Message):
    user_redemption_record: "UserRedemptionRecord" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllUserRedemptionRecordRequest(betterproto.Message):
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllUserRedemptionRecordResponse(betterproto.Message):
    user_redemption_record: List["UserRedemptionRecord"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryAllUserRedemptionRecordForUserRequest(betterproto.Message):
    """Query UserRedemptionRecords by chainId / userId pair"""

    chain_id: str = betterproto.string_field(1)
    day: int = betterproto.uint64_field(2)
    address: str = betterproto.string_field(3)
    limit: int = betterproto.uint64_field(4)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class QueryAllUserRedemptionRecordForUserResponse(betterproto.Message):
    user_redemption_record: List["UserRedemptionRecord"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryGetEpochUnbondingRecordRequest(betterproto.Message):
    epoch_number: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryGetEpochUnbondingRecordResponse(betterproto.Message):
    epoch_unbonding_record: "EpochUnbondingRecord" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllEpochUnbondingRecordRequest(betterproto.Message):
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllEpochUnbondingRecordResponse(betterproto.Message):
    epoch_unbonding_record: List["EpochUnbondingRecord"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class TransferCallback(betterproto.Message):
    """---------------------- Transfer Callback ---------------------- //"""

    deposit_record_id: int = betterproto.uint64_field(1)


class MsgStub(betterproto.ServiceStub):
    pass


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/stride.records.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def user_redemption_record(
        self,
        query_get_user_redemption_record_request: "QueryGetUserRedemptionRecordRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetUserRedemptionRecordResponse":
        return await self._unary_unary(
            "/stride.records.Query/UserRedemptionRecord",
            query_get_user_redemption_record_request,
            QueryGetUserRedemptionRecordResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def user_redemption_record_all(
        self,
        query_all_user_redemption_record_request: "QueryAllUserRedemptionRecordRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllUserRedemptionRecordResponse":
        return await self._unary_unary(
            "/stride.records.Query/UserRedemptionRecordAll",
            query_all_user_redemption_record_request,
            QueryAllUserRedemptionRecordResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def user_redemption_record_for_user(
        self,
        query_all_user_redemption_record_for_user_request: "QueryAllUserRedemptionRecordForUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllUserRedemptionRecordForUserResponse":
        return await self._unary_unary(
            "/stride.records.Query/UserRedemptionRecordForUser",
            query_all_user_redemption_record_for_user_request,
            QueryAllUserRedemptionRecordForUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def epoch_unbonding_record(
        self,
        query_get_epoch_unbonding_record_request: "QueryGetEpochUnbondingRecordRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetEpochUnbondingRecordResponse":
        return await self._unary_unary(
            "/stride.records.Query/EpochUnbondingRecord",
            query_get_epoch_unbonding_record_request,
            QueryGetEpochUnbondingRecordResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def epoch_unbonding_record_all(
        self,
        query_all_epoch_unbonding_record_request: "QueryAllEpochUnbondingRecordRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllEpochUnbondingRecordResponse":
        return await self._unary_unary(
            "/stride.records.Query/EpochUnbondingRecordAll",
            query_all_epoch_unbonding_record_request,
            QueryAllEpochUnbondingRecordResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit_record(
        self,
        query_get_deposit_record_request: "QueryGetDepositRecordRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetDepositRecordResponse":
        return await self._unary_unary(
            "/stride.records.Query/DepositRecord",
            query_get_deposit_record_request,
            QueryGetDepositRecordResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit_record_all(
        self,
        query_all_deposit_record_request: "QueryAllDepositRecordRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllDepositRecordResponse":
        return await self._unary_unary(
            "/stride.records.Query/DepositRecordAll",
            query_all_deposit_record_request,
            QueryAllDepositRecordResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {}


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_redemption_record(
        self,
        query_get_user_redemption_record_request: "QueryGetUserRedemptionRecordRequest",
    ) -> "QueryGetUserRedemptionRecordResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_redemption_record_all(
        self,
        query_all_user_redemption_record_request: "QueryAllUserRedemptionRecordRequest",
    ) -> "QueryAllUserRedemptionRecordResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_redemption_record_for_user(
        self,
        query_all_user_redemption_record_for_user_request: "QueryAllUserRedemptionRecordForUserRequest",
    ) -> "QueryAllUserRedemptionRecordForUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def epoch_unbonding_record(
        self,
        query_get_epoch_unbonding_record_request: "QueryGetEpochUnbondingRecordRequest",
    ) -> "QueryGetEpochUnbondingRecordResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def epoch_unbonding_record_all(
        self,
        query_all_epoch_unbonding_record_request: "QueryAllEpochUnbondingRecordRequest",
    ) -> "QueryAllEpochUnbondingRecordResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deposit_record(
        self, query_get_deposit_record_request: "QueryGetDepositRecordRequest"
    ) -> "QueryGetDepositRecordResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deposit_record_all(
        self, query_all_deposit_record_request: "QueryAllDepositRecordRequest"
    ) -> "QueryAllDepositRecordResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_user_redemption_record(
        self,
        stream: "grpclib.server.Stream[QueryGetUserRedemptionRecordRequest, QueryGetUserRedemptionRecordResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.user_redemption_record(request)
        await stream.send_message(response)

    async def __rpc_user_redemption_record_all(
        self,
        stream: "grpclib.server.Stream[QueryAllUserRedemptionRecordRequest, QueryAllUserRedemptionRecordResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.user_redemption_record_all(request)
        await stream.send_message(response)

    async def __rpc_user_redemption_record_for_user(
        self,
        stream: "grpclib.server.Stream[QueryAllUserRedemptionRecordForUserRequest, QueryAllUserRedemptionRecordForUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.user_redemption_record_for_user(request)
        await stream.send_message(response)

    async def __rpc_epoch_unbonding_record(
        self,
        stream: "grpclib.server.Stream[QueryGetEpochUnbondingRecordRequest, QueryGetEpochUnbondingRecordResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.epoch_unbonding_record(request)
        await stream.send_message(response)

    async def __rpc_epoch_unbonding_record_all(
        self,
        stream: "grpclib.server.Stream[QueryAllEpochUnbondingRecordRequest, QueryAllEpochUnbondingRecordResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.epoch_unbonding_record_all(request)
        await stream.send_message(response)

    async def __rpc_deposit_record(
        self,
        stream: "grpclib.server.Stream[QueryGetDepositRecordRequest, QueryGetDepositRecordResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deposit_record(request)
        await stream.send_message(response)

    async def __rpc_deposit_record_all(
        self,
        stream: "grpclib.server.Stream[QueryAllDepositRecordRequest, QueryAllDepositRecordResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deposit_record_all(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/stride.records.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/stride.records.Query/UserRedemptionRecord": grpclib.const.Handler(
                self.__rpc_user_redemption_record,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetUserRedemptionRecordRequest,
                QueryGetUserRedemptionRecordResponse,
            ),
            "/stride.records.Query/UserRedemptionRecordAll": grpclib.const.Handler(
                self.__rpc_user_redemption_record_all,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllUserRedemptionRecordRequest,
                QueryAllUserRedemptionRecordResponse,
            ),
            "/stride.records.Query/UserRedemptionRecordForUser": grpclib.const.Handler(
                self.__rpc_user_redemption_record_for_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllUserRedemptionRecordForUserRequest,
                QueryAllUserRedemptionRecordForUserResponse,
            ),
            "/stride.records.Query/EpochUnbondingRecord": grpclib.const.Handler(
                self.__rpc_epoch_unbonding_record,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetEpochUnbondingRecordRequest,
                QueryGetEpochUnbondingRecordResponse,
            ),
            "/stride.records.Query/EpochUnbondingRecordAll": grpclib.const.Handler(
                self.__rpc_epoch_unbonding_record_all,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllEpochUnbondingRecordRequest,
                QueryAllEpochUnbondingRecordResponse,
            ),
            "/stride.records.Query/DepositRecord": grpclib.const.Handler(
                self.__rpc_deposit_record,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetDepositRecordRequest,
                QueryGetDepositRecordResponse,
            ),
            "/stride.records.Query/DepositRecordAll": grpclib.const.Handler(
                self.__rpc_deposit_record_all,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllDepositRecordRequest,
                QueryAllDepositRecordResponse,
            ),
        }

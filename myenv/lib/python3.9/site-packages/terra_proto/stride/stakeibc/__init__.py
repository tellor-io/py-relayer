# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: stride/stakeibc/callbacks.proto, stride/stakeibc/epoch_tracker.proto, stride/stakeibc/genesis.proto, stride/stakeibc/gov.proto, stride/stakeibc/host_zone.proto, stride/stakeibc/ica_account.proto, stride/stakeibc/packet.proto, stride/stakeibc/params.proto, stride/stakeibc/query.proto, stride/stakeibc/tx.proto, stride/stakeibc/validator.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...cosmos.base import v1beta1 as __cosmos_base_v1_beta1__
from ...cosmos.base.query import v1beta1 as __cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ValidatorValidatorStatus(betterproto.Enum):
    ACTIVE = 0
    INACTIVE = 1


class IcaAccountType(betterproto.Enum):
    DELEGATION = 0
    FEE = 1
    WITHDRAWAL = 2
    REDEMPTION = 3


@dataclass(eq=False, repr=False)
class StakeibcPacketData(betterproto.Message):
    no_data: "NoData" = betterproto.message_field(1, group="packet")


@dataclass(eq=False, repr=False)
class NoData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ValidatorExchangeRate(betterproto.Message):
    internal_tokens_to_shares_rate: str = betterproto.string_field(1)
    epoch_number: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class Validator(betterproto.Message):
    name: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    status: "ValidatorValidatorStatus" = betterproto.enum_field(3)
    commission_rate: int = betterproto.uint64_field(4)
    delegation_amt: str = betterproto.string_field(5)
    weight: int = betterproto.uint64_field(6)
    internal_exchange_rate: "ValidatorExchangeRate" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class IcaAccount(betterproto.Message):
    address: str = betterproto.string_field(1)
    target: "IcaAccountType" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class HostZone(betterproto.Message):
    """next id: 19"""

    chain_id: str = betterproto.string_field(1)
    connection_id: str = betterproto.string_field(2)
    bech32_prefix: str = betterproto.string_field(17)
    transfer_channel_id: str = betterproto.string_field(12)
    validators: List["Validator"] = betterproto.message_field(3)
    blacklisted_validators: List["Validator"] = betterproto.message_field(4)
    withdrawal_account: "IcaAccount" = betterproto.message_field(5)
    fee_account: "IcaAccount" = betterproto.message_field(6)
    delegation_account: "IcaAccount" = betterproto.message_field(7)
    redemption_account: "IcaAccount" = betterproto.message_field(16)
    ibc_denom: str = betterproto.string_field(8)
    """ibc denom on stride"""

    host_denom: str = betterproto.string_field(9)
    """native denom on host zone"""

    last_redemption_rate: str = betterproto.string_field(10)
    """
    TODO(TEST-68): Should we make this an array and store the last n redemption
    rates then calculate a TWARR?
    """

    redemption_rate: str = betterproto.string_field(11)
    unbonding_frequency: int = betterproto.uint64_field(14)
    """stores how many days we should wait before issuing unbondings"""

    staked_bal: str = betterproto.string_field(13)
    """TODO(TEST-101) int to dec"""

    address: str = betterproto.string_field(18)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module. next id: 18"""

    rewards_interval: int = betterproto.uint64_field(1)
    """define epoch lengths, in stride_epochs"""

    delegate_interval: int = betterproto.uint64_field(6)
    deposit_interval: int = betterproto.uint64_field(2)
    redemption_rate_interval: int = betterproto.uint64_field(3)
    stride_commission: int = betterproto.uint64_field(4)
    zone_com_address: Dict[str, str] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    """
    zone_com_address stores which addresses to send the Stride commission too,
    as well as what portion of the fee each address is entitled to TODO
    implement this
    """

    reinvest_interval: int = betterproto.uint64_field(7)
    validator_rebalancing_threshold: int = betterproto.uint64_field(8)
    ica_timeout_nanos: int = betterproto.uint64_field(9)
    buffer_size: int = betterproto.uint64_field(10)
    ibc_timeout_blocks: int = betterproto.uint64_field(11)
    fee_transfer_timeout_nanos: int = betterproto.uint64_field(12)
    max_stake_ica_calls_per_epoch: int = betterproto.uint64_field(13)
    safety_min_redemption_rate_threshold: int = betterproto.uint64_field(14)
    safety_max_redemption_rate_threshold: int = betterproto.uint64_field(15)
    ibc_transfer_timeout_nanos: int = betterproto.uint64_field(16)
    safety_num_validators: int = betterproto.uint64_field(17)
    safety_max_slash_percent: int = betterproto.uint64_field(18)


@dataclass(eq=False, repr=False)
class AddValidatorProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    host_zone: str = betterproto.string_field(3)
    validator_name: str = betterproto.string_field(4)
    validator_address: str = betterproto.string_field(5)
    deposit: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class MsgLiquidStake(betterproto.Message):
    creator: str = betterproto.string_field(1)
    amount: str = betterproto.string_field(2)
    host_denom: str = betterproto.string_field(3)
    """TODO(TEST-86): Update Denom -> HostDenom"""


@dataclass(eq=False, repr=False)
class MsgLiquidStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgClearBalance(betterproto.Message):
    creator: str = betterproto.string_field(1)
    chain_id: str = betterproto.string_field(2)
    amount: str = betterproto.string_field(3)
    channel: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgClearBalanceResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRedeemStake(betterproto.Message):
    creator: str = betterproto.string_field(1)
    amount: str = betterproto.string_field(2)
    host_zone: str = betterproto.string_field(3)
    receiver: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgRedeemStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRegisterHostZone(betterproto.Message):
    """next: 13"""

    connection_id: str = betterproto.string_field(2)
    bech32_prefix: str = betterproto.string_field(12)
    host_denom: str = betterproto.string_field(4)
    ibc_denom: str = betterproto.string_field(5)
    creator: str = betterproto.string_field(6)
    transfer_channel_id: str = betterproto.string_field(10)
    unbonding_frequency: int = betterproto.uint64_field(11)


@dataclass(eq=False, repr=False)
class MsgRegisterHostZoneResponse(betterproto.Message):
    """
    TODO(TEST-53): Remove this pre-launch (no need for clients to create /
    interact with ICAs)
    """

    pass


@dataclass(eq=False, repr=False)
class MsgClaimUndelegatedTokens(betterproto.Message):
    creator: str = betterproto.string_field(1)
    host_zone_id: str = betterproto.string_field(2)
    """UserUnbondingRecords are keyed on {chain_id}.{epoch}.{sender}"""

    epoch: int = betterproto.uint64_field(3)
    sender: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgClaimUndelegatedTokensResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRebalanceValidators(betterproto.Message):
    creator: str = betterproto.string_field(1)
    host_zone: str = betterproto.string_field(2)
    num_rebalance: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgRebalanceValidatorsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgAddValidator(betterproto.Message):
    creator: str = betterproto.string_field(1)
    host_zone: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    address: str = betterproto.string_field(4)
    commission: int = betterproto.uint64_field(5)
    weight: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class MsgAddValidatorResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgChangeValidatorWeight(betterproto.Message):
    creator: str = betterproto.string_field(1)
    host_zone: str = betterproto.string_field(2)
    val_addr: str = betterproto.string_field(3)
    weight: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class MsgChangeValidatorWeightResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDeleteValidator(betterproto.Message):
    creator: str = betterproto.string_field(1)
    host_zone: str = betterproto.string_field(2)
    val_addr: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgDeleteValidatorResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRestoreInterchainAccount(betterproto.Message):
    creator: str = betterproto.string_field(1)
    chain_id: str = betterproto.string_field(2)
    account_type: "IcaAccountType" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class MsgRestoreInterchainAccountResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgUpdateValidatorSharesExchRate(betterproto.Message):
    creator: str = betterproto.string_field(1)
    chain_id: str = betterproto.string_field(2)
    valoper: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgUpdateValidatorSharesExchRateResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EpochTracker(betterproto.Message):
    epoch_identifier: str = betterproto.string_field(1)
    epoch_number: int = betterproto.uint64_field(2)
    next_epoch_start_time: int = betterproto.uint64_field(3)
    duration: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class QueryInterchainAccountFromAddressRequest(betterproto.Message):
    """
    QueryInterchainAccountFromAddressRequest is the request type for the
    Query/InterchainAccountAddress RPC
    """

    owner: str = betterproto.string_field(1)
    connection_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryInterchainAccountFromAddressResponse(betterproto.Message):
    """
    QueryInterchainAccountFromAddressResponse the response type for the
    Query/InterchainAccountAddress RPC
    """

    interchain_account_address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryGetValidatorsRequest(betterproto.Message):
    chain_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValidatorsResponse(betterproto.Message):
    validators: List["Validator"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGetHostZoneRequest(betterproto.Message):
    chain_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetHostZoneResponse(betterproto.Message):
    host_zone: "HostZone" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllHostZoneRequest(betterproto.Message):
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllHostZoneResponse(betterproto.Message):
    host_zone: List["HostZone"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class QueryModuleAddressRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryModuleAddressResponse(betterproto.Message):
    addr: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetEpochTrackerRequest(betterproto.Message):
    epoch_identifier: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetEpochTrackerResponse(betterproto.Message):
    epoch_tracker: "EpochTracker" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllEpochTrackerRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryAllEpochTrackerResponse(betterproto.Message):
    epoch_tracker: List["EpochTracker"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGetNextPacketSequenceRequest(betterproto.Message):
    channel_id: str = betterproto.string_field(1)
    port_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryGetNextPacketSequenceResponse(betterproto.Message):
    sequence: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class SplitDelegation(betterproto.Message):
    """
    ---------------------- Delegation Callbacks ---------------------- //
    """

    validator: str = betterproto.string_field(1)
    amount: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DelegateCallback(betterproto.Message):
    host_zone_id: str = betterproto.string_field(1)
    deposit_record_id: int = betterproto.uint64_field(2)
    split_delegations: List["SplitDelegation"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ClaimCallback(betterproto.Message):
    user_redemption_record_id: str = betterproto.string_field(1)
    chain_id: str = betterproto.string_field(2)
    epoch_number: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class ReinvestCallback(betterproto.Message):
    """---------------------- Reinvest Callback ---------------------- //"""

    reinvest_amount: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)
    host_zone_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class UndelegateCallback(betterproto.Message):
    """
    ---------------------- Undelegation Callbacks ---------------------- //
    """

    host_zone_id: str = betterproto.string_field(1)
    split_delegations: List["SplitDelegation"] = betterproto.message_field(2)
    epoch_unbonding_record_ids: List[int] = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class RedemptionCallback(betterproto.Message):
    """
    ---------------------- Redemption Callbacks ---------------------- //
    """

    host_zone_id: str = betterproto.string_field(1)
    epoch_unbonding_record_ids: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class Rebalancing(betterproto.Message):
    src_validator: str = betterproto.string_field(1)
    dst_validator: str = betterproto.string_field(2)
    amt: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RebalanceCallback(betterproto.Message):
    host_zone_id: str = betterproto.string_field(1)
    rebalancings: List["Rebalancing"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the stakeibc module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    port_id: str = betterproto.string_field(2)
    host_zone_list: List["HostZone"] = betterproto.message_field(5)
    """list of zones that are registered by the protocol"""

    epoch_tracker_list: List["EpochTracker"] = betterproto.message_field(10)


class MsgStub(betterproto.ServiceStub):
    async def liquid_stake(
        self,
        msg_liquid_stake: "MsgLiquidStake",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgLiquidStakeResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/LiquidStake",
            msg_liquid_stake,
            MsgLiquidStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def redeem_stake(
        self,
        msg_redeem_stake: "MsgRedeemStake",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRedeemStakeResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/RedeemStake",
            msg_redeem_stake,
            MsgRedeemStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_host_zone(
        self,
        msg_register_host_zone: "MsgRegisterHostZone",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRegisterHostZoneResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/RegisterHostZone",
            msg_register_host_zone,
            MsgRegisterHostZoneResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def claim_undelegated_tokens(
        self,
        msg_claim_undelegated_tokens: "MsgClaimUndelegatedTokens",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgClaimUndelegatedTokensResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/ClaimUndelegatedTokens",
            msg_claim_undelegated_tokens,
            MsgClaimUndelegatedTokensResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rebalance_validators(
        self,
        msg_rebalance_validators: "MsgRebalanceValidators",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRebalanceValidatorsResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/RebalanceValidators",
            msg_rebalance_validators,
            MsgRebalanceValidatorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_validator(
        self,
        msg_add_validator: "MsgAddValidator",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgAddValidatorResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/AddValidator",
            msg_add_validator,
            MsgAddValidatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_validator_weight(
        self,
        msg_change_validator_weight: "MsgChangeValidatorWeight",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgChangeValidatorWeightResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/ChangeValidatorWeight",
            msg_change_validator_weight,
            MsgChangeValidatorWeightResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_validator(
        self,
        msg_delete_validator: "MsgDeleteValidator",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDeleteValidatorResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/DeleteValidator",
            msg_delete_validator,
            MsgDeleteValidatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def restore_interchain_account(
        self,
        msg_restore_interchain_account: "MsgRestoreInterchainAccount",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRestoreInterchainAccountResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/RestoreInterchainAccount",
            msg_restore_interchain_account,
            MsgRestoreInterchainAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_validator_shares_exch_rate(
        self,
        msg_update_validator_shares_exch_rate: "MsgUpdateValidatorSharesExchRate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateValidatorSharesExchRateResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/UpdateValidatorSharesExchRate",
            msg_update_validator_shares_exch_rate,
            MsgUpdateValidatorSharesExchRateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def clear_balance(
        self,
        msg_clear_balance: "MsgClearBalance",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgClearBalanceResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Msg/ClearBalance",
            msg_clear_balance,
            MsgClearBalanceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validators(
        self,
        query_get_validators_request: "QueryGetValidatorsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetValidatorsResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Query/Validators",
            query_get_validators_request,
            QueryGetValidatorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def host_zone(
        self,
        query_get_host_zone_request: "QueryGetHostZoneRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetHostZoneResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Query/HostZone",
            query_get_host_zone_request,
            QueryGetHostZoneResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def host_zone_all(
        self,
        query_all_host_zone_request: "QueryAllHostZoneRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllHostZoneResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Query/HostZoneAll",
            query_all_host_zone_request,
            QueryAllHostZoneResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def module_address(
        self,
        query_module_address_request: "QueryModuleAddressRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryModuleAddressResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Query/ModuleAddress",
            query_module_address_request,
            QueryModuleAddressResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def interchain_account_from_address(
        self,
        query_interchain_account_from_address_request: "QueryInterchainAccountFromAddressRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryInterchainAccountFromAddressResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Query/InterchainAccountFromAddress",
            query_interchain_account_from_address_request,
            QueryInterchainAccountFromAddressResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def epoch_tracker(
        self,
        query_get_epoch_tracker_request: "QueryGetEpochTrackerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetEpochTrackerResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Query/EpochTracker",
            query_get_epoch_tracker_request,
            QueryGetEpochTrackerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def epoch_tracker_all(
        self,
        query_all_epoch_tracker_request: "QueryAllEpochTrackerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllEpochTrackerResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Query/EpochTrackerAll",
            query_all_epoch_tracker_request,
            QueryAllEpochTrackerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def next_packet_sequence(
        self,
        query_get_next_packet_sequence_request: "QueryGetNextPacketSequenceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetNextPacketSequenceResponse":
        return await self._unary_unary(
            "/stride.stakeibc.Query/NextPacketSequence",
            query_get_next_packet_sequence_request,
            QueryGetNextPacketSequenceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def liquid_stake(
        self, msg_liquid_stake: "MsgLiquidStake"
    ) -> "MsgLiquidStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def redeem_stake(
        self, msg_redeem_stake: "MsgRedeemStake"
    ) -> "MsgRedeemStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_host_zone(
        self, msg_register_host_zone: "MsgRegisterHostZone"
    ) -> "MsgRegisterHostZoneResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def claim_undelegated_tokens(
        self, msg_claim_undelegated_tokens: "MsgClaimUndelegatedTokens"
    ) -> "MsgClaimUndelegatedTokensResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rebalance_validators(
        self, msg_rebalance_validators: "MsgRebalanceValidators"
    ) -> "MsgRebalanceValidatorsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_validator(
        self, msg_add_validator: "MsgAddValidator"
    ) -> "MsgAddValidatorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_validator_weight(
        self, msg_change_validator_weight: "MsgChangeValidatorWeight"
    ) -> "MsgChangeValidatorWeightResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_validator(
        self, msg_delete_validator: "MsgDeleteValidator"
    ) -> "MsgDeleteValidatorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def restore_interchain_account(
        self, msg_restore_interchain_account: "MsgRestoreInterchainAccount"
    ) -> "MsgRestoreInterchainAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_validator_shares_exch_rate(
        self, msg_update_validator_shares_exch_rate: "MsgUpdateValidatorSharesExchRate"
    ) -> "MsgUpdateValidatorSharesExchRateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def clear_balance(
        self, msg_clear_balance: "MsgClearBalance"
    ) -> "MsgClearBalanceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_liquid_stake(
        self, stream: "grpclib.server.Stream[MsgLiquidStake, MsgLiquidStakeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.liquid_stake(request)
        await stream.send_message(response)

    async def __rpc_redeem_stake(
        self, stream: "grpclib.server.Stream[MsgRedeemStake, MsgRedeemStakeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.redeem_stake(request)
        await stream.send_message(response)

    async def __rpc_register_host_zone(
        self,
        stream: "grpclib.server.Stream[MsgRegisterHostZone, MsgRegisterHostZoneResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.register_host_zone(request)
        await stream.send_message(response)

    async def __rpc_claim_undelegated_tokens(
        self,
        stream: "grpclib.server.Stream[MsgClaimUndelegatedTokens, MsgClaimUndelegatedTokensResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.claim_undelegated_tokens(request)
        await stream.send_message(response)

    async def __rpc_rebalance_validators(
        self,
        stream: "grpclib.server.Stream[MsgRebalanceValidators, MsgRebalanceValidatorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.rebalance_validators(request)
        await stream.send_message(response)

    async def __rpc_add_validator(
        self, stream: "grpclib.server.Stream[MsgAddValidator, MsgAddValidatorResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_validator(request)
        await stream.send_message(response)

    async def __rpc_change_validator_weight(
        self,
        stream: "grpclib.server.Stream[MsgChangeValidatorWeight, MsgChangeValidatorWeightResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_validator_weight(request)
        await stream.send_message(response)

    async def __rpc_delete_validator(
        self,
        stream: "grpclib.server.Stream[MsgDeleteValidator, MsgDeleteValidatorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_validator(request)
        await stream.send_message(response)

    async def __rpc_restore_interchain_account(
        self,
        stream: "grpclib.server.Stream[MsgRestoreInterchainAccount, MsgRestoreInterchainAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.restore_interchain_account(request)
        await stream.send_message(response)

    async def __rpc_update_validator_shares_exch_rate(
        self,
        stream: "grpclib.server.Stream[MsgUpdateValidatorSharesExchRate, MsgUpdateValidatorSharesExchRateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_validator_shares_exch_rate(request)
        await stream.send_message(response)

    async def __rpc_clear_balance(
        self, stream: "grpclib.server.Stream[MsgClearBalance, MsgClearBalanceResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.clear_balance(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/stride.stakeibc.Msg/LiquidStake": grpclib.const.Handler(
                self.__rpc_liquid_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgLiquidStake,
                MsgLiquidStakeResponse,
            ),
            "/stride.stakeibc.Msg/RedeemStake": grpclib.const.Handler(
                self.__rpc_redeem_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRedeemStake,
                MsgRedeemStakeResponse,
            ),
            "/stride.stakeibc.Msg/RegisterHostZone": grpclib.const.Handler(
                self.__rpc_register_host_zone,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRegisterHostZone,
                MsgRegisterHostZoneResponse,
            ),
            "/stride.stakeibc.Msg/ClaimUndelegatedTokens": grpclib.const.Handler(
                self.__rpc_claim_undelegated_tokens,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgClaimUndelegatedTokens,
                MsgClaimUndelegatedTokensResponse,
            ),
            "/stride.stakeibc.Msg/RebalanceValidators": grpclib.const.Handler(
                self.__rpc_rebalance_validators,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRebalanceValidators,
                MsgRebalanceValidatorsResponse,
            ),
            "/stride.stakeibc.Msg/AddValidator": grpclib.const.Handler(
                self.__rpc_add_validator,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgAddValidator,
                MsgAddValidatorResponse,
            ),
            "/stride.stakeibc.Msg/ChangeValidatorWeight": grpclib.const.Handler(
                self.__rpc_change_validator_weight,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgChangeValidatorWeight,
                MsgChangeValidatorWeightResponse,
            ),
            "/stride.stakeibc.Msg/DeleteValidator": grpclib.const.Handler(
                self.__rpc_delete_validator,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDeleteValidator,
                MsgDeleteValidatorResponse,
            ),
            "/stride.stakeibc.Msg/RestoreInterchainAccount": grpclib.const.Handler(
                self.__rpc_restore_interchain_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRestoreInterchainAccount,
                MsgRestoreInterchainAccountResponse,
            ),
            "/stride.stakeibc.Msg/UpdateValidatorSharesExchRate": grpclib.const.Handler(
                self.__rpc_update_validator_shares_exch_rate,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateValidatorSharesExchRate,
                MsgUpdateValidatorSharesExchRateResponse,
            ),
            "/stride.stakeibc.Msg/ClearBalance": grpclib.const.Handler(
                self.__rpc_clear_balance,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgClearBalance,
                MsgClearBalanceResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def validators(
        self, query_get_validators_request: "QueryGetValidatorsRequest"
    ) -> "QueryGetValidatorsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def host_zone(
        self, query_get_host_zone_request: "QueryGetHostZoneRequest"
    ) -> "QueryGetHostZoneResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def host_zone_all(
        self, query_all_host_zone_request: "QueryAllHostZoneRequest"
    ) -> "QueryAllHostZoneResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def module_address(
        self, query_module_address_request: "QueryModuleAddressRequest"
    ) -> "QueryModuleAddressResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def interchain_account_from_address(
        self,
        query_interchain_account_from_address_request: "QueryInterchainAccountFromAddressRequest",
    ) -> "QueryInterchainAccountFromAddressResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def epoch_tracker(
        self, query_get_epoch_tracker_request: "QueryGetEpochTrackerRequest"
    ) -> "QueryGetEpochTrackerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def epoch_tracker_all(
        self, query_all_epoch_tracker_request: "QueryAllEpochTrackerRequest"
    ) -> "QueryAllEpochTrackerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def next_packet_sequence(
        self,
        query_get_next_packet_sequence_request: "QueryGetNextPacketSequenceRequest",
    ) -> "QueryGetNextPacketSequenceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_validators(
        self,
        stream: "grpclib.server.Stream[QueryGetValidatorsRequest, QueryGetValidatorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.validators(request)
        await stream.send_message(response)

    async def __rpc_host_zone(
        self,
        stream: "grpclib.server.Stream[QueryGetHostZoneRequest, QueryGetHostZoneResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.host_zone(request)
        await stream.send_message(response)

    async def __rpc_host_zone_all(
        self,
        stream: "grpclib.server.Stream[QueryAllHostZoneRequest, QueryAllHostZoneResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.host_zone_all(request)
        await stream.send_message(response)

    async def __rpc_module_address(
        self,
        stream: "grpclib.server.Stream[QueryModuleAddressRequest, QueryModuleAddressResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.module_address(request)
        await stream.send_message(response)

    async def __rpc_interchain_account_from_address(
        self,
        stream: "grpclib.server.Stream[QueryInterchainAccountFromAddressRequest, QueryInterchainAccountFromAddressResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.interchain_account_from_address(request)
        await stream.send_message(response)

    async def __rpc_epoch_tracker(
        self,
        stream: "grpclib.server.Stream[QueryGetEpochTrackerRequest, QueryGetEpochTrackerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.epoch_tracker(request)
        await stream.send_message(response)

    async def __rpc_epoch_tracker_all(
        self,
        stream: "grpclib.server.Stream[QueryAllEpochTrackerRequest, QueryAllEpochTrackerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.epoch_tracker_all(request)
        await stream.send_message(response)

    async def __rpc_next_packet_sequence(
        self,
        stream: "grpclib.server.Stream[QueryGetNextPacketSequenceRequest, QueryGetNextPacketSequenceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.next_packet_sequence(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/stride.stakeibc.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/stride.stakeibc.Query/Validators": grpclib.const.Handler(
                self.__rpc_validators,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetValidatorsRequest,
                QueryGetValidatorsResponse,
            ),
            "/stride.stakeibc.Query/HostZone": grpclib.const.Handler(
                self.__rpc_host_zone,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetHostZoneRequest,
                QueryGetHostZoneResponse,
            ),
            "/stride.stakeibc.Query/HostZoneAll": grpclib.const.Handler(
                self.__rpc_host_zone_all,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllHostZoneRequest,
                QueryAllHostZoneResponse,
            ),
            "/stride.stakeibc.Query/ModuleAddress": grpclib.const.Handler(
                self.__rpc_module_address,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryModuleAddressRequest,
                QueryModuleAddressResponse,
            ),
            "/stride.stakeibc.Query/InterchainAccountFromAddress": grpclib.const.Handler(
                self.__rpc_interchain_account_from_address,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryInterchainAccountFromAddressRequest,
                QueryInterchainAccountFromAddressResponse,
            ),
            "/stride.stakeibc.Query/EpochTracker": grpclib.const.Handler(
                self.__rpc_epoch_tracker,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetEpochTrackerRequest,
                QueryGetEpochTrackerResponse,
            ),
            "/stride.stakeibc.Query/EpochTrackerAll": grpclib.const.Handler(
                self.__rpc_epoch_tracker_all,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllEpochTrackerRequest,
                QueryAllEpochTrackerResponse,
            ),
            "/stride.stakeibc.Query/NextPacketSequence": grpclib.const.Handler(
                self.__rpc_next_packet_sequence,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetNextPacketSequenceRequest,
                QueryGetNextPacketSequenceResponse,
            ),
        }

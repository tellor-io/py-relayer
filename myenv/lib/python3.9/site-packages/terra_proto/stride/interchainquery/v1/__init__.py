# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: stride/interchainquery/v1/genesis.proto, stride/interchainquery/v1/messages.proto, stride/interchainquery/v1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....tendermint import crypto as ___tendermint_crypto__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgSubmitQueryResponse(betterproto.Message):
    """
    MsgSubmitQueryResponse represents a message type to fulfil a query request.
    """

    chain_id: str = betterproto.string_field(1)
    query_id: str = betterproto.string_field(2)
    result: bytes = betterproto.bytes_field(3)
    proof_ops: "___tendermint_crypto__.ProofOps" = betterproto.message_field(4)
    height: int = betterproto.int64_field(5)
    from_address: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class MsgSubmitQueryResponseResponse(betterproto.Message):
    """
    MsgSubmitQueryResponseResponse defines the MsgSubmitQueryResponse response
    type.
    """

    pass


@dataclass(eq=False, repr=False)
class Query(betterproto.Message):
    id: str = betterproto.string_field(1)
    connection_id: str = betterproto.string_field(2)
    chain_id: str = betterproto.string_field(3)
    query_type: str = betterproto.string_field(4)
    request: bytes = betterproto.bytes_field(5)
    callback_id: str = betterproto.string_field(8)
    ttl: int = betterproto.uint64_field(9)
    request_sent: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class DataPoint(betterproto.Message):
    id: str = betterproto.string_field(1)
    remote_height: str = betterproto.string_field(2)
    local_height: str = betterproto.string_field(3)
    value: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the epochs module's genesis state."""

    queries: List["Query"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryPendingQueriesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryPendingQueriesResponse(betterproto.Message):
    pending_queries: List["Query"] = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    async def submit_query_response(
        self,
        msg_submit_query_response: "MsgSubmitQueryResponse",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSubmitQueryResponseResponse":
        return await self._unary_unary(
            "/stride.interchainquery.v1.Msg/SubmitQueryResponse",
            msg_submit_query_response,
            MsgSubmitQueryResponseResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryServiceStub(betterproto.ServiceStub):
    async def pending_queries(
        self,
        query_pending_queries_request: "QueryPendingQueriesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPendingQueriesResponse":
        return await self._unary_unary(
            "/stride.interchainquery.v1.QueryService/PendingQueries",
            query_pending_queries_request,
            QueryPendingQueriesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    async def submit_query_response(
        self, msg_submit_query_response: "MsgSubmitQueryResponse"
    ) -> "MsgSubmitQueryResponseResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_submit_query_response(
        self,
        stream: "grpclib.server.Stream[MsgSubmitQueryResponse, MsgSubmitQueryResponseResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.submit_query_response(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/stride.interchainquery.v1.Msg/SubmitQueryResponse": grpclib.const.Handler(
                self.__rpc_submit_query_response,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSubmitQueryResponse,
                MsgSubmitQueryResponseResponse,
            ),
        }


class QueryServiceBase(ServiceBase):
    async def pending_queries(
        self, query_pending_queries_request: "QueryPendingQueriesRequest"
    ) -> "QueryPendingQueriesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_pending_queries(
        self,
        stream: "grpclib.server.Stream[QueryPendingQueriesRequest, QueryPendingQueriesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pending_queries(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/stride.interchainquery.v1.QueryService/PendingQueries": grpclib.const.Handler(
                self.__rpc_pending_queries,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPendingQueriesRequest,
                QueryPendingQueriesResponse,
            ),
        }

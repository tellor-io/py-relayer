# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: stride/icacallbacks/callback_data.proto, stride/icacallbacks/genesis.proto, stride/icacallbacks/packet.proto, stride/icacallbacks/params.proto, stride/icacallbacks/query.proto, stride/icacallbacks/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...cosmos.base.query import v1beta1 as __cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class IcacallbacksPacketData(betterproto.Message):
    no_data: "NoData" = betterproto.message_field(1, group="packet")


@dataclass(eq=False, repr=False)
class NoData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    pass


@dataclass(eq=False, repr=False)
class CallbackData(betterproto.Message):
    callback_key: str = betterproto.string_field(1)
    port_id: str = betterproto.string_field(2)
    channel_id: str = betterproto.string_field(3)
    sequence: int = betterproto.uint64_field(4)
    callback_id: str = betterproto.string_field(5)
    callback_args: bytes = betterproto.bytes_field(6)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryGetCallbackDataRequest(betterproto.Message):
    callback_key: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetCallbackDataResponse(betterproto.Message):
    callback_data: "CallbackData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryAllCallbackDataRequest(betterproto.Message):
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryAllCallbackDataResponse(betterproto.Message):
    callback_data: List["CallbackData"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the icacallbacks module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    port_id: str = betterproto.string_field(2)
    callback_data_list: List["CallbackData"] = betterproto.message_field(3)


class MsgStub(betterproto.ServiceStub):
    pass


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/stride.icacallbacks.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def callback_data(
        self,
        query_get_callback_data_request: "QueryGetCallbackDataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetCallbackDataResponse":
        return await self._unary_unary(
            "/stride.icacallbacks.Query/CallbackData",
            query_get_callback_data_request,
            QueryGetCallbackDataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def callback_data_all(
        self,
        query_all_callback_data_request: "QueryAllCallbackDataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllCallbackDataResponse":
        return await self._unary_unary(
            "/stride.icacallbacks.Query/CallbackDataAll",
            query_all_callback_data_request,
            QueryAllCallbackDataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):
    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {}


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def callback_data(
        self, query_get_callback_data_request: "QueryGetCallbackDataRequest"
    ) -> "QueryGetCallbackDataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def callback_data_all(
        self, query_all_callback_data_request: "QueryAllCallbackDataRequest"
    ) -> "QueryAllCallbackDataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_callback_data(
        self,
        stream: "grpclib.server.Stream[QueryGetCallbackDataRequest, QueryGetCallbackDataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.callback_data(request)
        await stream.send_message(response)

    async def __rpc_callback_data_all(
        self,
        stream: "grpclib.server.Stream[QueryAllCallbackDataRequest, QueryAllCallbackDataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.callback_data_all(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/stride.icacallbacks.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/stride.icacallbacks.Query/CallbackData": grpclib.const.Handler(
                self.__rpc_callback_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetCallbackDataRequest,
                QueryGetCallbackDataResponse,
            ),
            "/stride.icacallbacks.Query/CallbackDataAll": grpclib.const.Handler(
                self.__rpc_callback_data_all,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllCallbackDataRequest,
                QueryAllCallbackDataResponse,
            ),
        }

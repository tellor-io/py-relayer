# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: stride/ratelimit/genesis.proto, stride/ratelimit/gov.proto, stride/ratelimit/params.proto, stride/ratelimit/query.proto, stride/ratelimit/ratelimit.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class PacketDirection(betterproto.Enum):
    PACKET_SEND = 0
    PACKET_RECV = 1


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the ratelimit module's parameters."""

    pass


@dataclass(eq=False, repr=False)
class Path(betterproto.Message):
    denom: str = betterproto.string_field(1)
    channel_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Quota(betterproto.Message):
    max_percent_send: str = betterproto.string_field(1)
    max_percent_recv: str = betterproto.string_field(2)
    duration_hours: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class Flow(betterproto.Message):
    inflow: str = betterproto.string_field(1)
    outflow: str = betterproto.string_field(2)
    channel_value: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RateLimit(betterproto.Message):
    path: "Path" = betterproto.message_field(1)
    quota: "Quota" = betterproto.message_field(2)
    flow: "Flow" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AddRateLimitProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    denom: str = betterproto.string_field(3)
    channel_id: str = betterproto.string_field(4)
    max_percent_send: str = betterproto.string_field(5)
    max_percent_recv: str = betterproto.string_field(6)
    duration_hours: int = betterproto.uint64_field(7)
    deposit: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class UpdateRateLimitProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    denom: str = betterproto.string_field(3)
    channel_id: str = betterproto.string_field(4)
    max_percent_send: str = betterproto.string_field(5)
    max_percent_recv: str = betterproto.string_field(6)
    duration_hours: int = betterproto.uint64_field(7)
    deposit: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class RemoveRateLimitProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    denom: str = betterproto.string_field(3)
    channel_id: str = betterproto.string_field(4)
    deposit: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ResetRateLimitProposal(betterproto.Message):
    title: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    denom: str = betterproto.string_field(3)
    channel_id: str = betterproto.string_field(4)
    deposit: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class QueryAllRateLimitsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryAllRateLimitsResponse(betterproto.Message):
    rate_limits: List["RateLimit"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryRateLimitRequest(betterproto.Message):
    denom: str = betterproto.string_field(1)
    channel_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryRateLimitResponse(betterproto.Message):
    rate_limit: "RateLimit" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryRateLimitsByChainIdRequest(betterproto.Message):
    chain_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryRateLimitsByChainIdResponse(betterproto.Message):
    rate_limits: List["RateLimit"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryRateLimitsByChannelIdRequest(betterproto.Message):
    channel_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryRateLimitsByChannelIdResponse(betterproto.Message):
    rate_limits: List["RateLimit"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the ratelimit module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    """params defines all the parameters of the module."""

    rate_limits: List["RateLimit"] = betterproto.message_field(2)
    """list of rate limits"""


class QueryStub(betterproto.ServiceStub):
    async def all_rate_limits(
        self,
        query_all_rate_limits_request: "QueryAllRateLimitsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllRateLimitsResponse":
        return await self._unary_unary(
            "/stride.ratelimit.Query/AllRateLimits",
            query_all_rate_limits_request,
            QueryAllRateLimitsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rate_limit(
        self,
        query_rate_limit_request: "QueryRateLimitRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryRateLimitResponse":
        return await self._unary_unary(
            "/stride.ratelimit.Query/RateLimit",
            query_rate_limit_request,
            QueryRateLimitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rate_limits_by_chain_id(
        self,
        query_rate_limits_by_chain_id_request: "QueryRateLimitsByChainIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryRateLimitsByChainIdResponse":
        return await self._unary_unary(
            "/stride.ratelimit.Query/RateLimitsByChainId",
            query_rate_limits_by_chain_id_request,
            QueryRateLimitsByChainIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rate_limits_by_channel_id(
        self,
        query_rate_limits_by_channel_id_request: "QueryRateLimitsByChannelIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryRateLimitsByChannelIdResponse":
        return await self._unary_unary(
            "/stride.ratelimit.Query/RateLimitsByChannelId",
            query_rate_limits_by_channel_id_request,
            QueryRateLimitsByChannelIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def all_rate_limits(
        self, query_all_rate_limits_request: "QueryAllRateLimitsRequest"
    ) -> "QueryAllRateLimitsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rate_limit(
        self, query_rate_limit_request: "QueryRateLimitRequest"
    ) -> "QueryRateLimitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rate_limits_by_chain_id(
        self, query_rate_limits_by_chain_id_request: "QueryRateLimitsByChainIdRequest"
    ) -> "QueryRateLimitsByChainIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rate_limits_by_channel_id(
        self,
        query_rate_limits_by_channel_id_request: "QueryRateLimitsByChannelIdRequest",
    ) -> "QueryRateLimitsByChannelIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_all_rate_limits(
        self,
        stream: "grpclib.server.Stream[QueryAllRateLimitsRequest, QueryAllRateLimitsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.all_rate_limits(request)
        await stream.send_message(response)

    async def __rpc_rate_limit(
        self,
        stream: "grpclib.server.Stream[QueryRateLimitRequest, QueryRateLimitResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.rate_limit(request)
        await stream.send_message(response)

    async def __rpc_rate_limits_by_chain_id(
        self,
        stream: "grpclib.server.Stream[QueryRateLimitsByChainIdRequest, QueryRateLimitsByChainIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.rate_limits_by_chain_id(request)
        await stream.send_message(response)

    async def __rpc_rate_limits_by_channel_id(
        self,
        stream: "grpclib.server.Stream[QueryRateLimitsByChannelIdRequest, QueryRateLimitsByChannelIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.rate_limits_by_channel_id(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/stride.ratelimit.Query/AllRateLimits": grpclib.const.Handler(
                self.__rpc_all_rate_limits,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllRateLimitsRequest,
                QueryAllRateLimitsResponse,
            ),
            "/stride.ratelimit.Query/RateLimit": grpclib.const.Handler(
                self.__rpc_rate_limit,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRateLimitRequest,
                QueryRateLimitResponse,
            ),
            "/stride.ratelimit.Query/RateLimitsByChainId": grpclib.const.Handler(
                self.__rpc_rate_limits_by_chain_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRateLimitsByChainIdRequest,
                QueryRateLimitsByChainIdResponse,
            ),
            "/stride.ratelimit.Query/RateLimitsByChannelId": grpclib.const.Handler(
                self.__rpc_rate_limits_by_channel_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRateLimitsByChannelIdRequest,
                QueryRateLimitsByChannelIdResponse,
            ),
        }
